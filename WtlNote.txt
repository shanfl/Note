# Wtl Note

----


## ATL
<b>ATL Windowing-class Hierarchy</b>

> ![img](./wtlpic/atl_he.png)

<b>Wtl Windowing-class Hierarchy</b>

>![img](./wtlpic/wtl_he.png)

## ALL

![imag](./wtlpic/wtl_all.png)
----

##CMessageMap

<pre><code>
class ATL_NO_VTABLE CMessageMap
{
public:
	virtual BOOL ProcessWindowMessage(
		_In_ HWND hWnd,
		_In_ UINT uMsg,
		_In_ WPARAM wParam,
		_In_ LPARAM lParam,
		_Inout_ LRESULT& lResult,
		_In_ DWORD dwMsgMapID) = 0;
};

#define <B>BEGIN_MSG_MAP(theClass)</B> \
public: \
	BOOL ProcessWindowMessage(_In_ HWND hWnd, _In_ UINT uMsg, _In_ WPARAM wParam,\
		_In_ LPARAM lParam, _Inout_ LRESULT& lResult, _In_ DWORD dwMsgMapID = 0) \
	{ \
		BOOL bHandled = TRUE; \
		(hWnd); \
		(uMsg); \
		(wParam); \
		(lParam); \
		(lResult); \
		(bHandled); \
		switch(dwMsgMapID) \
		{ \
		case 0:


#define <B>END_MSG_MAP()</B> \
			break; \
		default: \
			ATLTRACE(ATL::atlTraceWindowing, 0, _T("Invalid message map ID (%i)\n"), dwMsgMapID); \
			ATLASSERT(FALSE); \
			break; \
		} \
		return FALSE; \
	}
</code></pre>

## 3. custum controls
1. <pre>
class MyListView : public CWindowImpl< MyListView, CListViewCtrl >,
                       public CCustomDraw< MyListView >     
</pre>

2. <pre><code>
`#if (_WTL_VER >= 0x0700)
	BOOL m_bHandledCD;
	BOOL IsMsgHandled() const
	{
		return m_bHandledCD;
	}
	void SetMsgHandled(BOOL bHandled)
	{
		m_bHandledCD = bHandled;
	}
`#if (_WTL_VER > 0x0700)
`#pragma message("WTL > 7.0 Revisit WTL Bug Kludge:  Is IsMsgHandled, " \
	`"SetMsgHandled still required in derived class when "  \
	`"using CCustomDraw?");
`#endif //(_WTL_VER > 0x0700)
`#endif //(_WTL_VER >= 0x0700)
`#endif</code></pre>

<b>or</b>
> 
<font color="#ff00000">`BEGIN_MSG_MAP_EX`</font>

<b>or</b>
> 
IN PARENT HWND : </br>
> <font color="#ff00000"><b>`REFLECT_NOTIFICATIONS()`</font></b></br>
in this CLASS: </br>
> <font color="#ff00000"><b>`CHAIN_MSG_MAP_ALT(CCustomDraw< THIS >,1)`</font></b>


3. realize 
   * DWORD OnPrePaint(int /\*idCtrl\*/, LPNMCUSTOMDRAW /\*lpNMCustomDraw\*/)
   * DWORD OnItemPrePaint(int /\*idCtrl\*/, LPNMCUSTOMDRAW lpNMCustomDraw)
> IN:  <font color="#3322ff"><b>`DWORD OnItemPrePaint(int /\*idCtrl\*/, LPNMCUSTOMDRAW lpNMCustomDraw)`</b></font>
> 
<pre><code> <font color="#337700"><b> NMLVCUSTOMDRAW* pLVCD = reinterpret_cast<NMLVCUSTOMDRAW*>( lpNMCustomDraw );</b></font>
     // This is the prepaint stage for an item. Here's where we set the
     // item's text color. Our return value will tell Windows to draw the
     // item itself, but it will use the new color we set here for the background
     COLORREF crText;
     if ( (pLVCD->nmcd.dwItemSpec % 2) == 0 )
	 {
       		<font color="#ff0000"><b>pLVCD->crText = RGB(255,0,255);
	   		pLVCD->clrText  = RGB(0,125,255);</b></font>
	 }
     else 
	 {
      		<font color="#ff0000"><b>pLVCD->crText = RGB(255,255,255); 
	  		pLVCD->clrText  = RGB(255,125,0);</b></font>
	 }</code> <pre>